// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ヘルスチェック
	// (GET /api/open/healthcheck)
	GetApiOpenHealthcheck(ctx echo.Context) error
	// マイ店舗 登録
	// (POST /api/v2/myshop)
	PostApiV2Myshop(ctx echo.Context) error
	// マイ店舗削除
	// (POST /api/v2/myshop/delete)
	PostApiV2MyshopDelete(ctx echo.Context) error
	// マイ店舗 一覧取得
	// (GET /api/v2/myshop/{memberId})
	GetApiV2MyshopMemberId(ctx echo.Context, memberId GetMyMemberId) error
	// 会員情報 参照
	// (GET /api/v2/user/detail/{memberId})
	GetApiV2UserDetailMemberId(ctx echo.Context, memberId GetMyMemberId) error
	// 会員情報 変更
	// (POST /api/v2/user/update)
	PostApiV2UserUpdate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApiOpenHealthcheck converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiOpenHealthcheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiOpenHealthcheck(ctx)
	return err
}

// PostApiV2Myshop converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV2Myshop(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApiV2Myshop(ctx)
	return err
}

// PostApiV2MyshopDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV2MyshopDelete(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApiV2MyshopDelete(ctx)
	return err
}

// GetApiV2MyshopMemberId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV2MyshopMemberId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "memberId" -------------
	var memberId GetMyMemberId

	err = runtime.BindStyledParameterWithLocation("simple", false, "memberId", runtime.ParamLocationPath, ctx.Param("memberId"), &memberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter memberId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiV2MyshopMemberId(ctx, memberId)
	return err
}

// GetApiV2UserDetailMemberId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV2UserDetailMemberId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "memberId" -------------
	var memberId GetMyMemberId

	err = runtime.BindStyledParameterWithLocation("simple", false, "memberId", runtime.ParamLocationPath, ctx.Param("memberId"), &memberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter memberId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiV2UserDetailMemberId(ctx, memberId)
	return err
}

// PostApiV2UserUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV2UserUpdate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApiV2UserUpdate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/open/healthcheck", wrapper.GetApiOpenHealthcheck)
	router.POST(baseURL+"/api/v2/myshop", wrapper.PostApiV2Myshop)
	router.POST(baseURL+"/api/v2/myshop/delete", wrapper.PostApiV2MyshopDelete)
	router.GET(baseURL+"/api/v2/myshop/:memberId", wrapper.GetApiV2MyshopMemberId)
	router.GET(baseURL+"/api/v2/user/detail/:memberId", wrapper.GetApiV2UserDetailMemberId)
	router.POST(baseURL+"/api/v2/user/update", wrapper.PostApiV2UserUpdate)

}

